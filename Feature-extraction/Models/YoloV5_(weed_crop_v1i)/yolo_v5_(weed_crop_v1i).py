# -*- coding: utf-8 -*-
"""YOLO_V5_(weed_crop_v1i).ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1SD-aKeefU-lz2zI43MuJLY0aM6pIoNXc
"""

from google.colab import drive
drive.mount('/content/drive')

# Commented out IPython magic to ensure Python compatibility.
!git clone https://github.com/ultralytics/yolov5
# %cd yolov5
!pip install -r requirements.txt

data_yaml_content = """
train: /content/drive/MyDrive/Datasets/WeedCrop.v1i.yolov5pytorch/train/images
val: /content/drive/MyDrive/Datasets/WeedCrop.v1i.yolov5pytorch/valid/images

nc: 2
names: ['crop', 'weed']
"""
with open('/content/yolov5/data.yaml', 'w') as f:
    f.write(data_yaml_content)

!python /content/yolov5/train.py --img 320 --batch 32 --epochs 14 --data /content/yolov5/data.yaml --weights yolov5s.pt --cache --name weed_detection

!python /content/yolov5/val.py --weights /content/yolov5/runs/train/weed_detection/weights/best.pt --data /content/yolov5/data.yaml --img 320

import torch
from PIL import Image
from pathlib import Path
from sklearn.metrics import confusion_matrix, precision_score, recall_score, f1_score, accuracy_score

# Load the model
model = torch.hub.load('ultralytics/yolov5', 'custom', path='/content/yolov5/runs/train/weed_detection/weights/best.pt')

# Define test image directory
test_img_dir = Path('/content/drive/MyDrive/Datasets/WeedCrop.v1i.yolov5pytorch/test/images')

# Load test images
test_imgs = list(test_img_dir.glob('*.jpg'))

y_true = []
y_pred = []

# Defining the classes
classes = ['crop', 'weed']

for img_path in test_imgs:
    img = Image.open(img_path)
    results = model(img)

    # Assuming binary classification: weed (1) and crop (0)
    # Adjust threshold as needed
    weed_detected = any([True for x in results.xyxy[0] if x[5] == 1])
    y_pred.append(1 if weed_detected else 0)

    # Load the corresponding label
    label_path = img_path.with_suffix('.txt').as_posix().replace('images', 'labels')
    with open(label_path, 'r') as f:
        anns = f.read().strip().split('\n')
        # Now 'classes' is defined and can be used here
        is_weed = any([True for ann in anns if classes[int(ann.split()[0])] == 'weed'])
        y_true.append(1 if is_weed else 0)

# Calculate metrics
cm = confusion_matrix(y_true, y_pred)
precision = precision_score(y_true, y_pred)
recall = recall_score(y_true, y_pred)
f1 = f1_score(y_true, y_pred)
accuracy = accuracy_score(y_true, y_pred)

print("Confusion Matrix:\n", cm)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)
print("Accuracy:", accuracy)

from PIL import Image
import torch

# Function to load and preprocess a single image
def load_image(img_path):
    img = Image.open(img_path)
    return img

# Function to make a prediction on a single image
def predict_image(model, img_path):
    img = load_image(img_path)
    results = model(img)
    return results

# Load the model
model = torch.hub.load('ultralytics/yolov5', 'custom', path='/content/yolov5/runs/train/weed_detection/weights/best.pt')

# An example image
example_img_path = '/content/drive/MyDrive/Datasets/WeedCrop.v1i.yolov5pytorch/test/images/32356_jpg.rf.a493fe0fbbb4ac1ad1b72f01bc599b52.jpg'

# Make a prediction
results = predict_image(model, example_img_path)
results.show()  # Display the image with detections

# Output the prediction
weed_detected = any([True for x in results.xyxy[0] if x[5] == 1])
if weed_detected:
    print("The image is predicted to contain weed(s).")
else:
    print("The image is predicted to be free of weeds.")

from PIL import Image
import torch

# Function to load and preprocess a single image
def load_image(img_path):
    img = Image.open(img_path)
    return img

# Function to make a prediction on a single image
def predict_image(model, img_path):
    img = load_image(img_path)
    display(img)
    results = model(img)
    return results

# Load the model
model = torch.hub.load('ultralytics/yolov5', 'custom', path='/content/yolov5/runs/train/weed_detection/weights/best.pt')

# An example image
example_img_path = '/content/drive/MyDrive/Datasets/WeedCrop.v1i.yolov5pytorch/test/images/IMG_6136_JPG.rf.660194dbd4186904e9f18afef31e4b87.jpg'
# Make a prediction
results = predict_image(model, example_img_path)
results.show()  # Display the image with detections

# Output the prediction
weed_detected = any([True for x in results.xyxy[0] if x[5] == 1])
if weed_detected:
    print("The image is predicted to contain weed(s).")
else:
    print("The image is predicted to be free of weeds.")